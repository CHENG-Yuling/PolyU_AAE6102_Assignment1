function [estimatedStates, P] = ekfGNSS(measurements, initialState, Q, R)
    % ekfGNSS - 扩展卡尔曼滤波器用于 GNSS 状态估计
    %
    % Inputs:
    %   measurements - 包含伪距和多普勒信息的结构数组
    %   initialState - 状态向量 [位置; 速度]
    %   Q - 过程噪声协方差矩阵
    %   R - 测量噪声协方差矩阵
    %   navSolutions - 导航解的结构，包含伪距和其他信息
    %
    % Outputs:
    %   estimatedStates - 估计后的状态 [位置; 速度]
    %   P - 协方差矩阵

    % 状态向量维度
    n = length(initialState);
    
    % 初始化状态和协方差矩阵
    estimatedStates = initialState;  % 初始化状态
    P = eye(n);  % 初始化协方差矩阵为单位矩阵

    % 获取测量数量
    numMeasurements = length(measurements);
    
    % 预测步骤
    % 简单的状态转移模型 (可以根据需要进行扩展)
    % 这里我们假设状态不随时间变化
    F = eye(n);  % 状态转移矩阵，假设状态将在短时间内保持不变
    estimatedStatesPred = F * estimatedStates;  % 预测的状态
    P = F * P * F' + Q;  % 更新协方差

    % 更新步骤
    for k = 1:numMeasurements
        % 提取当前测量值
        pseudorange = measurements(k).pseudorange;
        if isfield(measurements(k), 'doppler')
            doppler = measurements(k).doppler;
        else
            doppler = 0;  % 如果没有测量值，设为 0
        end
        
        % 计算测量预测值 (这里用简单的伪距模型)
        predictedPseudorange = norm(estimatedStates(1:3));  % 位置为状态向量的前3个元素
        predictedDoppler = estimatedStates(4:6);  % 速度为状态向量的后3个元素

        % 测量更新
        H = [predictedPseudorange, 0, 0, 0, 0, 0;  % 伪距的雅可比矩阵
             0, 0, 0, predictedDoppler(1), predictedDoppler(2), predictedDoppler(3)]; % 多普勒的雅可比矩阵

        % 测量残差
        z = [pseudorange; doppler];  % 测量向量
        z_hat = [predictedPseudorange; norm(predictedDoppler)];
        disp('Size of z:');
disp(size(z));  % 打印 z 的维度
disp('Size of z_hat:');
disp(size(z_hat));  % 打印 z_hat 的维度

        y = z - z_hat;  % 残差

        % 协方差更新
        S = H * P * H' + R;  % 残差协方差
        K = P * H' / S;  % 卡尔曼增益

        % 更新状态
        estimatedStates = estimatedStates + K * y;  % 更新状态
        P = (eye(n) - K * H) * P;  % 更新协方差
    end
end